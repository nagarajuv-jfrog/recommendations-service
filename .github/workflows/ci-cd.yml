name: 'Recommendations-Service CI/CD Pipeline'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      - name: Configure Artifactory for Python
        run: |
          jfrog pipc --repo-resolve=bookverse-pypi-local

      - name: Install Python dependencies with JFrog CLI
        run: |
          jfrog pip install -r requirements.txt

      - name: Set Unique SemVer Version
        id: set_version
        run: |
          VERSION="1.3.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        run: |
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||')
          IMAGE_TAG="$REGISTRY_URL/bookverse-docker-internal/${{ github.event.repository.name }}-backend:${{ steps.set_version.outputs.VERSION }}"
          jfrog docker build --pull -t $IMAGE_TAG \
            --build-arg JFROG_URL=${{ vars.JFROG_URL }} \
            --build-arg JFROG_USER=${{ vars.JFROG_USER }} \
            --build-arg JFROG_ACCESS_TOKEN=${{ secrets.JFROG_ACCESS_TOKEN }} \
            -f Dockerfile.backend .
          jfrog rt dp $IMAGE_TAG bookverse-docker-internal --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

      - name: Build and Push Frontend Image
        run: |
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||')
          IMAGE_TAG="$REGISTRY_URL/bookverse-docker-internal/${{ github.event.repository.name }}-frontend:${{ steps.set_version.outputs.VERSION }}"
          jfrog docker build --pull -t $IMAGE_TAG -f Dockerfile.frontend .
          jfrog rt dp $IMAGE_TAG bookverse-docker-internal --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

      - name: Collect Git information for Build Info
        run: |
          jfrog rt bag ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Collect Environment Variables for Build Info
        run: |
          jfrog rt bce ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Publish Build Info
        run: |
          jfrog rt bp ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Create Microservice Release Bundle
        run: |
          jfrog rbc ${{ github.event.repository.name }} ${{ steps.set_version.outputs.VERSION }} --project=bookverse --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

      - name: Set Initial Annotations on Release Bundle
        run: |
          # Randomly select a release cadence and feature ID
          cadences=("hotfix" "major" "scheduled" "experimental")
          feature_prefixes=("JIRA" "BUG" "FEAT" "TASK")
          feature_suffixes=("Login" "UI-Fix" "API-Update" "Refactor-Core")
          
          RELEASE_CADENCE=${cadences[$RANDOM % ${#cadences[@]}]}
          
          # Generate a more random feature ID
          PREFIX=${feature_prefixes[$RANDOM % ${#feature_prefixes[@]}]}
          SUFFIX=${feature_suffixes[$RANDOM % ${#feature_suffixes[@]}]}
          RANDOM_NUM=$((RANDOM % 900 + 100)) # Random 3-digit number
          FEATURE_ID="$PREFIX-$RANDOM_NUM-$SUFFIX"
          
          echo "Selected Cadence: $RELEASE_CADENCE"
          echo "Selected Feature ID: $FEATURE_ID"

          jfrog rba ${{ github.event.repository.name }} ${{ steps.set_version.outputs.VERSION }} \
            --tag=$RELEASE_CADENCE \
            --properties="release.cadence=$RELEASE_CADENCE;feature.name=$FEATURE_ID;branch=${{ github.ref_name }};promoted_by=${{ github.actor }}"

      - name: Create and Attach Build Link Evidence
        run: |
          cat <<EOF > build-link-evidence.json
          {
            "builder": { "id": "uri:github-actions" },
            "runId": { "workflow_run_id": "${{ github.run_id }}" }
          }
          EOF

          # Create Markdown Evidence
          cat <<EOF > build-link-evidence.md
          # Build Link Evidence
          This evidence links the release bundle to the CI/CD pipeline that built it.
          - **Workflow Run:** [${{ github.server.url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}](${{ github.server.url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

          jf evd create --predicate build-link-evidence.json \
          --predicate-type "Build Link" --markdown build-link-evidence.md \
          --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ steps.set_version.outputs.VERSION }} \
          --project bookverse --key-alias "bookverse_key" --key "${{ secrets.BOOKVERSE_KEY }}"

  promote-bundle:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"

      - name: Create and Attach Commit Review Evidence (Pre-DEV Gate)
        run: |
          # Randomly select committer and reviewer
          committers=("dev-a@bookverse.com" "dev-b@bookverse.com" "dev-c@bookverse.com")
          reviewers=("qa-a@bookverse.com" "qa-b@bookverse.com" "lead@bookverse.com")
          statuses=("Approved" "Approved" "Approved" "Requires Changes")
          
          committer=${committers[$RANDOM % ${#committers[@]}]}
          reviewer=${reviewers[$RANDOM % ${#reviewers[@]}]}
          status=${statuses[$RANDOM % ${#statuses[@]}]}

          cat <<EOF > commit-review.json
          {
            "attributes": [
              { "name": "committer", "value": "$committer" },
              { "name": "reviewer", "value": "$reviewer" },
              { "name": "review_status", "value": "$status" }
            ]
          }
          EOF

          # Create Markdown Evidence
          cat <<EOF > commit-review.md
          # Commit Review Evidence
          This evidence attests that the code has passed the peer review gate.
          | Field         | Value        |
          |---------------|--------------|
          | **Committer** | \`$committer\` |
          | **Reviewer** | \`$reviewer\`  |
          | **Status** | **$status** |
          EOF

          jf evd create --predicate commit-review.json \
          --predicate-type "Attribute Report" --markdown commit-review.md \
          --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
          --project bookverse --key-alias "bookverse_key" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to DEV
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} DEV --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach DEV Smoke Test Evidence (QA Gate)
        run: |
          # Generate random test results
          passed_tests=$((RANDOM % 3 + 1))
          failed_tests=$((3 - passed_tests))
          duration=$(echo "scale=2; $RANDOM/1000" | bc)
          api_duration=$((RANDOM % 200 + 50))
          db_duration=$((RANDOM % 100 + 20))
          frontend_duration=$((RANDOM % 15000 + 5000))
          test_result=$(if [ $failed_tests -eq 0 ]; then echo "PASSED"; else echo "FAILED"; fi)

          cat <<EOF > dev-smoke-test.json
          {
            "summary": {
              "result": "$test_result",
              "test_suite": "Smoke Tests (ran in DEV)",
              "total_tests": 3,
              "passed": $passed_tests,
              "failed": $failed_tests,
              "duration_seconds": $duration
            },
            "tests": [
              { "name": "API Endpoint Connectivity", "status": "PASSED", "duration_ms": $api_duration },
              { "name": "Database Connection", "status": "PASSED", "duration_ms": $db_duration },
              { "name": "Frontend Load Test", "status": "$test_result", "duration_ms": $frontend_duration }
            ]
          }
          EOF

          # Create Markdown Evidence
          cat <<EOF > dev-smoke-test.md
          # DEV Smoke Test Results
          - **Result:** $test_result
          - **Duration:** ${duration}s
          | Test Case                   | Status | Duration (ms) |
          |-----------------------------|--------|---------------|
          | API Endpoint Connectivity   | PASSED | $api_duration     |
          | Database Connection         | PASSED | $db_duration      |
          | Frontend Load Test          | $test_result | $frontend_duration  |
          EOF

          jf evd create --predicate dev-smoke-test.json \
          --predicate-type "Test Results" --markdown dev-smoke-test.md \
          --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
          --project bookverse --key-alias "bookverse_key" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to QA
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} QA --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach QA Test & Jira Evidence (STAGE Gate)
        run: |
          # Generate random QA test results
          passed_qa=$((RANDOM % 100 + 250))
          failed_qa=$((RANDOM % 5))
          skipped_qa=$((RANDOM % 5))
          duration_qa=$((RANDOM % 60 + 90))
          qa_result=$(if [ $failed_qa -eq 0 ]; then echo "PASSED"; else echo "FAILED"; fi)

          # Create QA Test JSON and Markdown
          cat <<EOF > qa-test-results.json
          {
            "result": "$qa_result",
            "duration": "${duration_qa}s",
            "passed": $passed_qa,
            "failed": $failed_qa,
            "skipped": $skipped_qa,
            "test_suite": "QA Regression Suite (ran in QA)"
          }
          EOF
          cat <<EOF > qa-test-results.md
          # QA Regression Suite Results
          | Metric  | Value     |
          |---------|-----------|
          | Result  | $qa_result  |
          | Passed  | $passed_qa  |
          | Failed  | $failed_qa  |
          | Skipped | $skipped_qa |
          | Duration| ${duration_qa}s |
          EOF

          # Create Jira Issues JSON and Markdown
          cat <<EOF > qa-jira-issues.json
          {
            "attributes": [
              {
                "name": "jira_integration",
                "value": {
                  "server_url": "https://bookverse.atlassian.net",
                  "query": "fixVersion = ${{ needs.build-and-publish.outputs.version }} AND status in (Resolved, Closed)",
                  "issues_found": 2,
                  "issues": [
                    {
                      "key": "BOOK-101",
                      "summary": "UI glitch on checkout page for large orders",
                      "status": "Closed",
                      "priority": "High"
                    },
                    {
                      "key": "BOOK-105",
                      "summary": "API returns 500 error when book stock is zero",
                      "status": "Resolved",
                      "priority": "Medium"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          cat <<EOF > qa-jira-issues.md
          # Jira Issue Tracking
          This evidence shows all Jira tickets resolved in this version.
          - **Jira Query:** \`fixVersion = ${{ needs.build-and-publish.outputs.version }} AND status in (Resolved, Closed)\`
          - **Issues Found:** 2
          ### Resolved Issues
          1.  **BOOK-101:** UI glitch on checkout page for large orders (Status: Closed)
          2.  **BOOK-105:** API returns 500 error when book stock is zero (Status: Resolved)
          EOF

          # Create Evidences with JFrog CLI
          jfrog evd create \
            --predicate qa-test-results.json \
            --markdown qa-test-results.md \
            --predicate-type "Test Result" \
            --release-bundle ${{ github.event.repository.name }} \
            --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
            --project bookverse \
            --key-alias "bookverse_key" \
            --key "${{ secrets.BOOKVERSE_KEY }}"
            
          jfrog evd create \
            --predicate qa-jira-issues.json \
            --markdown qa-jira-issues.md \
            --predicate-type "Attribute Report" \
            --release-bundle ${{ github.event.repository.name }} \
            --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
            --project bookverse \
            --key-alias "bookverse_key" \
            --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to STAGE
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} STAGE --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach STAGE Sign-off & Trace Evidence (PROD Gate)
        run: |
          # Randomly select an approver
          approvers=("product-manager-a@bookverse.com" "product-manager-b@bookverse.com" "cto@bookverse.com")
          approver=${approvers[$RANDOM % ${#approvers[@]}]}
          trace_id="trace-$(openssl rand -hex 8)"

          # Create Stage Sign-off JSON and Markdown
          cat <<EOF > stage-signoff.json
          {
            "attributes": [
              {
                "name": "quality_gate_passed",
                "value": true
              },
              {
                "name": "approved_by",
                "value": "$approver"
              }
            ]
          }
          EOF
          cat <<EOF > stage-signoff.md
          # STAGE Sign-off
          | Field         | Value      |
          |---------------|------------|
          | **Approved By** | \`$approver\`|
          | **Gate Status** | PASSED     |
          EOF

          # Create Runtime Trace JSON and Markdown
          cat <<EOF > stage-runtime-trace.json
          {
            "trace_id": "$trace_id",
            "environment": "STAGE",
            "status": "SUCCESS",
            "duration": "7200s",
            "details": "Application ran successfully under load test in staging environment."
          }
          EOF
          cat <<EOF > stage-runtime-trace.md
          # STAGE Runtime Trace
          - **Environment:** STAGE
          - **Status:** SUCCESS
          - **Trace ID:** \`$trace_id\`
          EOF

          # Create Evidences with JFrog CLI
          jfrog evd create \
            --predicate stage-signoff.json \
            --markdown stage-signoff.md \
            --predicate-type "Stage Sign-off" \
            --release-bundle ${{ github.event.repository.name }} \
            --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
            --project bookverse \
            --key-alias "bookverse_key" \
            --key "${{ secrets.BOOKVERSE_KEY }}"
            
          jfrog evd create \
            --predicate stage-runtime-trace.json \
            --markdown stage-runtime-trace.md \
            --predicate-type "Runtime Trace" \
            --release-bundle ${{ github.event.repository.name }} \
            --release-bundle-version ${{ needs.build-and-publish.outputs.version }} \
            --project bookverse \
            --key-alias "bookverse_key" \
            --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to PROD and Update Latest Tag
        run: |
          # Define the new version being promoted
          NEW_VERSION=${{ needs.build-and-publish.outputs.version }}
          RELEASE_BUNDLE_NAME=${{ github.event.repository.name }}
          JFROG_RECORDS_API_URL="${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/$RELEASE_BUNDLE_NAME"

          # 1. Promote the new version to the PROD repository
          echo "Promoting version $NEW_VERSION to PROD..."
          jfrog rbp "$RELEASE_BUNDLE_NAME" "$NEW_VERSION" PROD --promotion-type=move --include-repos=bookverse-docker-internal-prod

          # 2. Apply the 'latest' tag to the newly promoted version
          echo "Applying 'latest' tag to version $NEW_VERSION..."
          jfrog rba "$RELEASE_BUNDLE_NAME" "$NEW_VERSION" --tag=latest --properties="status=prod"
          
          # 3. Use the API to find ALL OTHER release bundles currently tagged 'latest'
          echo "Searching for all other bundles tagged 'latest' to clean them up..."
          LATEST_BUNDLES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "$JFROG_RECORDS_API_URL?project=bookverse")
          
          # Use jq to create a list of versions to process, excluding the version we just promoted.
          PREVIOUS_LATEST_VERSIONS=$(echo "$LATEST_BUNDLES_JSON" | jq -r --arg new_ver "$NEW_VERSION" '.release_bundles[] | select(.bundle_tag == "latest" and .release_bundle_version != $new_ver) | .release_bundle_version')

          # 4. Loop through all found versions and restore their original tag
          if [[ -n "$PREVIOUS_LATEST_VERSIONS" ]]; then
            echo "Found previous latest versions to process: $PREVIOUS_LATEST_VERSIONS"
            for version in $PREVIOUS_LATEST_VERSIONS; do
              echo "--- Processing old version: $version ---"
              
              # Fetch the specific properties for this old version
              PROPS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "$JFROG_RECORDS_API_URL/$version?project=bookverse")
              OLD_CADENCE_TAG=$(echo "$PROPS_JSON" | jq -r '(.properties // [])[] | select(.key == "release.cadence") | .value')

              if [[ -n "$OLD_CADENCE_TAG" ]]; then
                echo "Restoring original tag for version $version to '$OLD_CADENCE_TAG'..."
                jfrog rba "$RELEASE_BUNDLE_NAME" "$version" --tag="$OLD_CADENCE_TAG"
              else
                echo "Warning: Could not find 'release.cadence' property for version $version. Removing tag instead."
                jfrog rba "$RELEASE_BUNDLE_NAME" "$version" --tag=""
              fi
            done
            echo "--- Cleanup complete ---"
          else
            echo "No previous 'latest' versions found to clean up."
          fi

          echo "Promotion successful. Version $NEW_VERSION is now the single 'latest' release."